# This is a basic workflow to help you get started with Actions

name: Backend Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up SSH
        id: ssh-setup
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
          HOST: ${{ secrets.HOST }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

      - name: Create .evn file
        id: create-env
        run: |

          # Create .env file  
          cat << EOF > .env
          NODE_ENV=${{ secrets.NODE_ENV }}
          PORT=${{ secrets.PORT }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
          FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}
          DOMAIN=${{ secrets.DOMAIN }}
          EOF

      - name: Setup directories and copy files
        id: setup-directories
        run: |
          # Copy repository files
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "mkdir -p ~/github_project/shopco-backend"
          scp -r ./* ${{ secrets.SSH_USER }}@${{ secrets.HOST }}:~/github_project/shopco-backend/

          # Copy .env file
          scp -r ./.env ${{ secrets.SSH_USER }}@${{ secrets.HOST }}:~/github_project/shopco-backend/

      - name: Check and create Docker networks
        id: create-docker-networks
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }}
          # Check and create traefik-net
          if ! docker network ls | grep -q "traefik-net"; then
            docker network create traefik-net
          fi

          # Check and create shopco-net
          if ! docker network ls | grep -q "shopco-net"; then
            docker network create shopco-net
          fi

      - name: Deploy Backend
        id: deploy-backend
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "cd ~/github_project/shopco-backend && \
          if docker compose ps --services --filter 'status=running' | grep -q 'shopco-backend'; then \
          docker compose stop shopco-backend && \
          docker compose rm -f shopco-backend; \
          fi && \
          docker compose up -d shopco-backend"

      - name: Clean up SSH keys
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa ~/.ssh/known_hosts
